{
  "version": 3,
  "sources": ["../../grade-js/src/index.js"],
  "sourcesContent": ["const prefixes = ['webkit'];\n\nclass Grade {\n    constructor(container, img_selector, callback) {\n        this.callback = callback || null\n        this.container = container;\n        this.image = this.container.querySelector(img_selector) || this.container.querySelector('img')\n        this.gradientData = []\n        if(!this.image || !this.container){\n            return\n        }\n        this.canvas = document.createElement('canvas');\n        this.ctx = this.canvas.getContext('2d');\n        this.imageDimensions = {\n            width: 0,\n            height: 0\n        };\n        this.imageData = [];\n        this.readImage()\n    }\n\n    readImage() {\n        this.imageDimensions.width = this.image.width * 0.1;\n        this.imageDimensions.height = this.image.height * 0.1;\n        this.render()\n    }\n\n    getImageData() {\n        let imageData = this.ctx.getImageData(\n            0, 0, this.imageDimensions.width, this.imageDimensions.height\n        ).data;\n        this.imageData = Array.from(imageData)\n    }\n\n    getChunkedImageData() {\n        const perChunk = 4;\n\n        let chunked = this.imageData.reduce((ar, it, i) => {\n            const ix = Math.floor(i / perChunk)\n            if (!ar[ix]) {\n                ar[ix] = []\n            }\n            ar[ix].push(it);\n            return ar\n        }, []);\n\n        let filtered = chunked.filter(rgba => {\n            return rgba.slice(0, 2).every(val => val < 250) && rgba.slice(0, 2).every(val => val > 0)\n        });\n\n        return filtered\n    }\n\n    getRGBAGradientValues(top) {\n        return top.map((color, index) => {\n            return `rgb(${color.rgba.slice(0, 3).join(',')}) ${index == 0 ? '0%' : '75%'}`\n        }).join(',')\n    }\n\n    getCSSGradientProperty(top) {\n        const val = this.getRGBAGradientValues(top);\n        return prefixes.map(prefix => {\n            return `background-image: -${prefix}-linear-gradient(\n                        135deg,\n                        ${val}\n                    )`\n        }).concat([`background-image: linear-gradient(\n                    135deg,\n                    ${val}\n                )`]).join(';')\n    }\n\n    getMiddleRGB(start, end) {\n        let w = 0.5 * 2 - 1;\n        let w1 = (w + 1) / 2.0;\n        let w2 = 1 - w1;\n        let rgb = [parseInt(start[0] * w1 + end[0] * w2), parseInt(start[1] * w1 + end[1] * w2), parseInt(start[2] * w1 + end[2] * w2)];\n        return rgb;\n    }\n\n    getSortedValues(uniq) {\n        const occurs = Object.keys(uniq).map(key => {\n                const rgbaKey = key;\n                let components = key.split('|'),\n                    brightness = ((components[0] * 299) + (components[1] * 587) + (components[2] * 114)) / 1000\n                return {\n                    rgba: rgbaKey.split('|'),\n                    occurs: uniq[key],\n                    brightness\n                }\n            }).sort((a, b) => a.occurs - b.occurs).reverse().slice(0, 10);\n        return occurs.sort((a, b) => a.brightness - b.brightness).reverse()\n    }\n\n    getTextProperty(top) {\n        let rgb = this.getMiddleRGB(top[0].rgba.slice(0,3), top[1].rgba.slice(0,3));\n        let o = Math.round(((parseInt(rgb[0]) * 299) + (parseInt(rgb[1]) * 587) + (parseInt(rgb[2]) * 114)) /1000);\n        if (o > 125) {\n            return 'color: #000';\n        } else { \n            return 'color: #fff';\n        }\n    }\n\n    getTopValues(uniq) {\n        let sorted = this.getSortedValues(uniq);\n        return [sorted[0], sorted[sorted.length - 1]]\n    }\n\n    getUniqValues(chunked) {\n        return chunked.reduce((accum, current) => {\n            let key = current.join('|');\n            if (!accum[key]) {\n                accum[key] = 1;\n                return accum\n            }\n            accum[key] = ++(accum[key]);\n            return accum\n        }, {})\n    }\n\n    renderGradient() {\n        const ls = window.localStorage;\n        const item_name = `grade-${this.image.getAttribute('src')}`;\n        let top = null;\n\n        if (ls && ls.getItem(item_name)) {\n            top = JSON.parse(ls.getItem(item_name));\n        } else {\n            let chunked = this.getChunkedImageData();\n            top = this.getTopValues(this.getUniqValues(chunked));\n\n            if (ls) {\n                ls.setItem(item_name, JSON.stringify(top));\n            }\n        }\n\n        if(this.callback){\n            this.gradientData = top\n            return\n        }\n\n        let gradientProperty = this.getCSSGradientProperty(top);\n\n        let textProperty = this.getTextProperty(top);\n\n        let style = `${this.container.getAttribute('style') || ''}; ${gradientProperty}; ${textProperty}`;\n        this.container.setAttribute('style', style)\n    }\n\n    render() {\n        this.canvas.width = this.imageDimensions.width;\n        this.canvas.height = this.imageDimensions.height;\n        this.ctx.drawImage(this.image, 0, 0, this.imageDimensions.width, this.imageDimensions.height);\n        this.getImageData();\n        this.renderGradient();\n    }\n}\n\nmodule.exports = (containers, img_selector, callback) => {\n    const init = (container, img_selector, callback) => {\n        let grade = new Grade(container, img_selector, callback),\n            gradientData = grade.gradientData\n        if(!gradientData.length){\n            return null\n        }\n        return {\n            element: container,\n            gradientData\n        }\n    }\n    let results = (NodeList.prototype.isPrototypeOf(containers)\n    ? Array.from(containers).map(container => init(container, img_selector, callback))\n    : [init(containers, img_selector, callback)]).filter(Boolean)\n\n    if(results.length){\n        return callback(results)\n    }\n};\n"],
  "mappings": "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",
  "names": ["img_selector", "callback"]
}
